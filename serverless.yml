org: franciscolisboa
service: serverless

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: provided.al2023
  stage: dev
  region: us-east-1
  iam:
    role: ${env:AWS_IAM_ROLE}
  environment:
    DATABASE_URL: ${cf:${self:service}-${self:provider.stage}.DatabaseURL
    # Add other environment variables as needed

functions:
  tickets:
    handler: bootstrap
    events:
      - httpApi:
          method: any
          path: /{proxy+}

resources:
  Resources:
    # RDS Instance Configuration
    MyPostgresRDS:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: my-postgres-db
        DBInstanceClass: db.t3.micro
        Engine: postgres
        EngineVersion: 16.3
        MasterUsername: postgres
        MasterUserPassword: postgres 
        DBName: postgres
        AllocatedStorage: 20
        PubliclyAccessible: true
        MultiAZ: false
        BackupRetentionPeriod: 7

    # Security Group for RDS Instance
    MyRDSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Allow access to Postgres RDS instance"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '5432'
            ToPort: '5432'
            CidrIp: 0.0.0.0/0 # This allows access from anywhere; restrict in production

  Outputs:
    DatabaseURL:
      Value: !Sub "postgresql://postgres:${MyPostgresRDS.Endpoint.Address}:5432/postgres"
      Export:
        Name: DatabaseURL-${self:provider.stage}

custom:
  serverless-offline:
    httpPort: 3000 # Local server port when using serverless-offline plugin
    lambdaPort: 3002 # Lambda function local execution port
